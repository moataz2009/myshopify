{% assign wClass_8 = 'w-full px-6 lg:px-0 sm:w-11/12 lg:w-10/12 xl:w-8/12 max-w-screen-xl mx-auto' %}
<div class="{{wClass_8}} py-12">
  {% if cart.item_count > 0 %}
  
  <h1 class="text-2xl lg:text-3xl font-normal mb-8">{{ 'cart.general.title' | t }}</h1>
  <form action="{{ routes.cart_url }}" method="post" novalidate class="cart">
    <table class="responsive-table">
      <thead class="cart__row cart__header-labels text-sm uppercase small--hide">
        <th colspan="2" class="font-normal">{{ 'cart.label.product' | t }}</th>
        <th class="text-right font-normal">{{ 'cart.label.price' | t }}</th>
        <th class="text-center font-normal">{{ 'cart.label.quantity' | t }}</th>
        <th class="text-right font-normal">{{ 'cart.label.total' | t }}</th>
      </thead>
      <tbody>
        {% for item in cart.items %}
          <tr class="cart__row responsive-table__row relative" data-item-id="{{item.id}}">
            <td class="cart__table-cell--image small--text-center">
              <a href="{{ item.url }}">
                {% comment %}
                  More image size options at:
                    - http://docs.shopify.com/themes/filters/product-img-url
                {% endcomment %}
                <img class="block mx-auto cart__image bg-transparent sm:bg-gray-800" src="{{ item | img_url: 'medium' }}" alt="{{ item.title | escape }}">
              </a>
            </td>
            <td class="cart__table-cell--meta small--text-left">
              <a href="{{ item.url }}" class="block text-lg line-clamp-2 sm:line-clamp-1 md:line-clamp-2 md:text-xl font-bold leading-snug text-white mb-4">
                {{ item.product.title }}
              </a>
              {% unless item.product.has_only_default_variant %}
                <p class="text-sm md:text-base text-gray-400">
                  {% for option in item.options_with_values %}
                    <span class="block">{{ option.value }}</span>
                  {% endfor %}
                </p>
              {% endunless %}

              {% unless item.selling_plan_allocation == nil %}
                <span class="text-sm md:text-base text-gray-400">
                  {{ item.selling_plan_allocation.selling_plan.name }}
                </span>
                <br/>
              {% endunless %}

              {% comment %}
                Optional, loop through custom product line items if available

                Line item properties come in as having two parts. The first part will be passed with the default form,
                but p.last is the actual custom property and may be blank. If it is, don't show it.

                For more info on line item properties, visit:
                  - http://docs.shopify.com/support/your-store/products/how-do-I-collect-additional-information-on-the-product-page-Like-for-a-monogram-engraving-or-customization
              {% endcomment %}
              {% assign property_size = item.properties | size %}
              {% if property_size > 0 %}
                {% for p in item.properties %}
                  {% assign first_character_in_key = p.first | truncate: 1, '' %}
                  {% unless p.last == blank or first_character_in_key == '_' %}
                    {% if forloop.first %}
                      <span class="text-sm md:text-base">{{ p.first }}: </span>
                    {% else %}
                      <br/>
                      <span class="text-sm md:text-base">{{ p.first }}: </span>
                    {% endif %}

                    {% comment %}
                      Check if there was an uploaded file associated
                    {% endcomment %}
                    {% if p.last contains '/uploads/' %}
                      <a class="text-sm md:text-base" href="{{ p.last }}">{{ p.last | split: '/' | last }}</a>
                    {% else %}
                      <span class="text-sm md:text-base">{{ p.last }}</span>
                    {% endif %}

                  {% endunless %}
                {% endfor %}
              {% endif %}

              <button type="button" class="cart__remove text-sm md:text-base border-b border-cyan text-cyan">
                {{ 'cart.general.remove' | t }}
              </button>
            </td>
            <td class="text-right text-lg singlePrice" data-label="{{ 'cart.label.price' | t }}">
              {%- if item.original_price != item.final_price -%}
                <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
                <del>{{ item.original_price | money }}</del>
                <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
                <span class="order-discount">{{ item.final_price | money }}</span>
              {%- else -%}
                {{ item.original_price | money }}
              {%- endif -%}
              {%- if item.variant.available and item.variant.unit_price_measurement -%}
                {% include 'product-unit-price', variant: item.variant, available: item.variant.available %}
              {%- endif -%}

              {%- if item.line_level_discount_allocations != blank -%}
                <ul class="order-discount order-discount--list order-discount--cart-list order-discount--title order-discount--cart order-discount--cart-title" aria-label="{{ 'customer.order.discount' | t }}">
                  {%- for discount_allocation in item.line_level_discount_allocations -%}
                    <li class="order-discount__item">
                      <span class="icon icon-saletag" aria-hidden="true"></span>{{ discount_allocation.discount_application.title }} (-{{ discount_allocation.amount | money }})
                    </li>
                  {%- endfor -%}
                </ul>
              {%- endif -%}

            </td>
            <td data-label="{{ 'cart.label.quantity' | t }}" class="text-right sm:text-center">
              <input type="number" data-ajax-qty name="updates[]" 
                class="text-center w-20 border border-gray-400 border-solid bg-transparent"{% if item.quantity >= item.variant.inventory_quantity %} disabled{% endif %}
                id="updates_{{ item.key }}" 
                value="{% if item.variant.inventory_policy != 'continue' and item.quantity >= item.variant.inventory_quantity %}{{ item.variant.inventory_quantity }}{% else %}{{ item.quantity }}{% endif %}" 
                min="1" max="{% if item.variant.inventory_policy == 'continue' %}999{% else %}{{item.variant.inventory_quantity}}{% endif %}" data-id="{{ item.key }}">

              <span class="quantity_over_hint block static mt-2 sm:absolute sm:mt-0 sm:bottom-8 right-0 text-xs text-cyan{% if item.quantity >= item.variant.inventory_quantity and item.variant.inventory_policy == 'deny' %} block{% else %} hidden{% endif %}">
                All {{item.variant.inventory_quantity}} {{item.product.title}} - {{item.variant.title}} are in your cart.
              </span>
            </td>
            <td data-label="{{ 'cart.label.total' | t }}" class="text-right text-lg font-bold">
              {%- if item.original_line_price != item.final_line_price -%}
                <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
                <del>{{ item.original_line_price | money }}</del>
                <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
                <span class="order-discount">{{ item.final_line_price | money }}</span>
              {%- else -%}
                {{ item.original_line_price | money }}
              {%- endif -%}
            </td>
          </tr>
        {% endfor %}
      </tbody>
    </table>

    <footer class="cart__footer py-8">
      <div class="flex flex-col md:flex-row justify-betwwen">
        {% if settings.cart_notes_enable %}
          <div class="w-full md:w-1/2 cart__notes">
            <label for="CartSpecialInstructions" class="label--block text-sm mb-2">{{ 'cart.general.note' | t }}</label>
            <textarea name="note" id="CartSpecialInstructions" class="input--block text-sm bg-transparent border border-solid border-gray-400">{{ cart.note }}</textarea>
          </div>
        {% endif %}
        <div class="w-full mt-6 md:mt-0 md:w-1/2 text-right">
          {%- if cart.cart_level_discount_applications != blank -%}
            <div class="order-discount-wrapper-cart">
              {%- for discount_application in cart.cart_level_discount_applications -%}
                <span class="order-discount order-discount--title order-discount--cart-title">
                  <span class="icon icon-saletag" aria-hidden="true"></span><span class="visually-hidden">{{ 'customer.order.discount' | t }}:</span>{{- discount_application.title -}}
                </span>
                <span class="order-discount">-{{ discount_application.total_allocated_amount | money }}</span>
              {%- endfor -%}
            </div>
          {%- endif -%}
          <p class="cart__subtotal-container">
            <span class="cart__subtotal-title">{{ 'cart.general.subtotal' | t }}</span>
            <span class="cart__subtotal text-lg font-bold">{{ cart.total_price | money }}</span>
          </p>

          <p class="text-sm mb-4">
            Free shipping on all orders over $30.
          </p>

          {% if additional_checkout_buttons %}
            <div class="additional-checkout-buttons">
              {{ content_for_additional_checkout_buttons }}
            </div>
            {% endif %}
            <div class="support-cards my-8 flex justify-end">
              {{ 'credit-card-amex.svg' | asset_url | img_tag: 'amex','block' }}
              {{ 'credit-card-master.svg' | asset_url | img_tag: 'master','block ml-2' }}
              {{ 'credit-card-visa.svg' | asset_url | img_tag: 'visa','block ml-2' }}
            </div>
          
            <button type="submit" name="update" class="btn text-link cart__update uppercase">
              {{ 'cart.general.update' | t }}
            </button>
            <button type="submit" name="checkout" class="btn cart__checkout uppercase">
              {{ 'cart.general.checkout' | t }}
            </button>
        </div>
      </div>
    </footer>
  </form>
  {% else %}
  <div class="text-center">
    <h1>{{ 'cart.general.title' | t }}</h1>
    <p class="cart--empty-message">{{ 'cart.general.empty' | t }}</p>
    <p class="cart--cookie-message">{{ 'cart.general.cookies_required' | t }}</p>
    {%- comment -%}
    <p class="cart--continue-browsing">{{ 'cart.general.continue_browsing_html' | t: link: routes.all_products_collection_url }}</p>
    {%- endcomment -%}
    <p class="cart--continue-browsing">{{ 'cart.general.continue_browsing_html' | t: link: '/collections/pitaka-cases?t=iphone-cases' }}</p>
  </div>
  {% endif %}
</div>
<style>
  .cart__checkout,
  .cart__update{
    padding: 10px 18px;
    width: 139px;
    background: #fff;
    color: #000;
    font-size: 14px;
    font-weight: normal;
    border-radius: 0;
  }

  .cart__update{
    background: transparent;
    color: #fff;
    border: 1px solid #fff;
  }
  .shopify-cleanslate ._1mqqPYZtCQtz5_i0b-po4l{
    flex-direction: column !important;
    align-items: flex-end;
    justify-content: center;
  }
  .shopify-cleanslate ._3TUeZPsTWjDxakSmeDcA4D{
    width: 286px !important;
    flex-basis: unset !important;
  }

  @media screen and (max-width:767px) {
    .singlePrice{
      display: none !important;
    }
  }
</style>
<script>
  $(function () {

    var cart = {
      isUpdating: false,

      getCart: function () {
        return $.getJSON('/cart.js');
      },

      on: function (event, cb) {
        $(this).on(event, cb);
      },

      trigger: function (event, data) {
        $(this).triggerHandler(event, data);
      },

      updateNote: function (note) {
        return this._promiseChange({
          url: '/cart/update.js',
          dataType: 'json',
          data: {
            note: note || ''
          }
        });
      },

      removeItem: function (id) {
        return this._promiseChange({
          url: '/cart/change.js',
          dataType: 'json',
          data: {
            id: id,
            quantity: 0
          }
        });
      },

      changeItem: function (id, quantity) {
        return this._promiseChange({
          url: '/cart/change.js',
          dataType: 'json',
          data: {
            id: id,
            quantity: quantity
          }
        });
      },

      saveLocalState: function (state) {
        if (utils.isLocalStorageSupported()) {
          localStorage.shopify_cart_state = JSON.stringify(state); // eslint-disable-line camelcase
        }

        return state;
      },

      getLocalState: function () {
        // eslint-disable-line consistent-return
        if (utils.isLocalStorageSupported()) {
          return JSON.parse(localStorage.shopify_cart_state || '');
        }
      },

      _promiseChange: function (parameters) {
        var promiseRequest = $.ajax(parameters);

        this.isUpdating = true;

        // If offline, provide a rejected promise so that an error is thrown.
        if (navigator && !theme.isOnline) {
          promiseRequest = $.Deferred().reject();
        }

        return (
          promiseRequest
          // Some cart API requests don't return the cart object. If there is no
          // cart object then get one before proceeding.
          .then(
            function (state) {
              // console.log(state)
              if (typeof state.token === 'undefined') {
                return this.getCart();
              } else {
                return state;
              }
            }.bind(this)
          )
          .then(this.saveLocalState)
          // .then(this._triggerChangeEvent.bind(this))
          // .catch(this._triggerErrorEvent.bind(this))
          .always(
            function () {
              this.isUpdating = false;
            }.bind(this)
          )
        );
      },

      _triggerChangeEvent: function (state) {
        this.trigger('change', state);
        return state;
      },

      _triggerErrorEvent: function (error) {
        this.trigger('error', error);

        // We want to throw an error event, but also let any future 'catch' down
        // the promise chain to catch this error, so we re-throw the error.
        throw error;
      }
    };

    function changePrice(el, id) {
      cart.getCart().then(function (data) {
        var index = el.closest(".cart__row").index();
        var lineItems = data.items;
        var totalPrice = parseFloat(data.total_price / 100).toFixed(2);
        $(".cart__subtotal").html('<span class="money">$' + totalPrice + '</span>');
        var linePrice = (lineItems[index].line_price / 100).toFixed(2);
        // console.log(lineItems[index],linePrice);
        el.parents('.cart__row').find("td:last-child").html('<span class="money">$' + linePrice + '</span>');
      });
    }

    $(".cart__row").each(function(){
      var $this = $(this);
      var quantityInput = $this.find("input[type='number']");
      if(quantityInput.val() == 0){
        var id = $this.data('item-id');
        var $items = $('.cart__row');

        if ($items.length === 1) {
          $('.cart-drawer__footer').addClass("ajax-cart__item--remove");
        }
        $this.addClass("ajax-cart__item--remove");
        
        changePrice(quantityInput, id);
        cart.removeItem(id);
      }
    })

    $(".cart__row").on("input", "input[type='number']", function () {
      var $this = $(this),
        $max = parseInt($this.attr('max')),
        $min = parseInt($this.data('min')),
        val = parseInt($this.val(), 10);

        // console.log($max ,$min)
      
      var $item = $this.closest('.cart__row');
      var id = $item.data('item-id');
      $this.prop("disabled", false);

      if (val >= $max || val <= $min) {
        $this.prop("disabled", true)
      } else {
        $this.prop("disabled", false)
      }
      $this.val(isNaN(val) ? 0 : val);

      cart.changeItem(id, val);
      setTimeout(function(){
        changePrice($this, id);
      },500)
    });

    $('.cart-drawer__note').on('blur', function () {
      var note = $(this).val();
      cart.updateNote(note);
    });

    $('.cart__remove').on('click', function () {
      var $this = $(this);
      var $item = $(this).closest('.cart__row');
      var id = $item.data('item-id');
      var $items = $('.cart__row');

      if ($items.length === 1) {
        $('.cart-drawer__footer').addClass("ajax-cart__item--remove");
      }
      $item.addClass("ajax-cart__item--remove");
      
      changePrice($this, id);
      cart.removeItem(id);
    });
  })
</script>


{% schema %}
{
  "name": {
    "cs": "Košík",
    "da": "Indkøbskurv",
    "de": "Warenkorb",
    "en": "Cart",
    "es": "Carrito",
    "fi": "Ostoskori",
    "fr": "Panier",
    "it": "Carrello",
    "ja": "カート",
    "ko": "카트",
    "nb": "Handlekurv",
    "nl": "Winkelwagen",
    "pl": "Koszyk",
    "pt-BR": "Carrinho",
    "pt-PT": "Carrinho",
    "sv": "Kundvagn",
    "th": "ตะกร้าสินค้า",
    "tr": "Sepet",
    "vi": "Giỏ hàng",
    "zh-CN": "购物车",
    "zh-TW": "購物車"
  },
  "class": "cart-template-section",
  "settings": []
}
{% endschema %}
